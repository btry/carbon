{#
 # -------------------------------------------------------------------------
 # carbon plugin for GLPI
 # -------------------------------------------------------------------------
 #
 # MIT License
 #
 # Permission is hereby granted, free of charge, to any person obtaining a copy
 # of this software and associated documentation files (the "Software"), to deal
 # in the Software without restriction, including without limitation the rights
 # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 # copies of the Software, and to permit persons to whom the Software is
 # furnished to do so, subject to the following conditions:
 #
 # The above copyright notice and this permission notice shall be included in all
 # copies or substantial portions of the Software.
 #
 # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 # SOFTWARE.
 # -------------------------------------------------------------------------
 # @copyright Copyright (C) 2024 Teclib' and contributors.
 # @license   MIT https://opensource.org/licenses/mit-license.php
 # @link      https://github.com/pluginsGLPI/carbon
 # -------------------------------------------------------------------------
 #}

{% import 'components/form/fields_macros.html.twig' as fields %}

{% macro timeField(name, value, label = '', options = {}) %}
   {% import 'components/form/fields_macros.html.twig' as fields %}
   {% set options = {'rand': random()}|merge(options) %}

   {% if options.disabled %}
      {% set options = options|merge({specific_tags: {'disabled': 'disabled'}}) %}
   {% endif %}
   {% if options.fields_template.isMandatoryField(name) %}
      {% set options = {'specific_tags': {'required': true}}|merge(options) %}
   {% endif %}

   {% set field %}
      {% do call('Html::showTimeField', [name, {
         'value': value,
         'rand': options.rand,
         'width': '100%'
      }|merge(options)]) %}
   {% endset %}
   {{ fields.field(name, field, label, options) }}
{% endmacro %}

{% macro dropdownBoaviztaZone(name, value, label = '', options = {}) %}
   {% import 'components/form/fields_macros.html.twig' as fields %}

   {% if options.multiple ?? false %}
      {# Needed for empty value as the input wont be sent in this case... we need something to know the input was displayed AND empty #}
      {% set defined_input_name = "_#{name}_defined" %}
      <input type="hidden" name="{{ defined_input_name }}" value="1"></input>

      {# Multiple values will be set, input need to be an array #}
      {% set name = "#{name}[]" %}
   {% endif %}
   {% set options = {'rand': random()}|merge(options) %}
   {% if options.fields_template.isMandatoryField(name)|default(false) %}
      {% set options = {'specific_tags': {'required': true}}|merge(options) %}
   {% endif %}

   {% if options.disabled|default(false) %}
      {% set options = options|merge({specific_tags: {'disabled': 'disabled'}}) %}
   {% endif %}

   {% set field %}
      {% do call('GlpiPlugin\\Carbon\\DataSource\\Boaviztapi::dropdownBoaviztaZone', [name, {
         'value': value,
         'rand': options.rand,
         'width': '100%',
      }|merge(options)]) %}
   {% endset %}
   {% if field|trim is not empty %}
      {{ fields.field(name, field, label, options|merge({'id': 'dropdown_' ~ name ~ '_' ~ options.rand})) }}
   {% endif %}
{% endmacro %}

{% macro dropdownComputerType(name, value, label = '', options = {}) %}
   {% import 'components/form/fields_macros.html.twig' as fields %}

   {% if options.multiple ?? false %}
      {# Needed for empty value as the input wont be sent in this case... we need something to know the input was displayed AND empty #}
      {% set defined_input_name = "_#{name}_defined" %}
      <input type="hidden" name="{{ defined_input_name }}" value="1"></input>

      {# Multiple values will be set, input need to be an array #}
      {% set name = "#{name}[]" %}
   {% endif %}
   {% set options = {
      'rand': random(),
      'disabled': false,
   }|merge(options) %}
   {% if options.fields_template.isMandatoryField(name)|default(false) %}
      {% set options = {'specific_tags': {'required': true}}|merge(options) %}
   {% endif %}

   {% if options.disabled %}
      {% set options = options|merge({specific_tags: {'disabled': 'disabled'}}) %}
   {% endif %}

   {% set field %}
      {% do call('GlpiPlugin\\Carbon\\ComputerType::dropdownType', [name, {
         'value': value,
         'rand': options.rand,
         'width': '100%',
      }|merge(options)]) %}
   {% endset %}
   {% if field|trim is not empty %}
      {{ fields.field(name, field, label, options|merge({'id': 'dropdown_' ~ name ~ '_' ~ options.rand})) }}
   {% endif %}
{% endmacro %}
